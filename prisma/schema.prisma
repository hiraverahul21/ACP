generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Company {
  id                      String           @id @default(cuid())
  name                    String
  email                   String           @unique
  phone                   String?
  address                 String?
  city                    String?
  state                   String?
  pincode                 String?
  gst_number              String?
  pan_number              String?
  is_active               Boolean          @default(true)
  subscription_plan       SubscriptionPlan @default(BASIC)
  subscription_expires_at DateTime?
  created_at              DateTime         @default(now())
  updated_at              DateTime         @updatedAt
  branches                Branch[]
  items                   Item[]
  leads                   Lead[]
  quotes                  Quote[]
  staff                   Staff[]

  @@map("companies")
}

model Staff {
  id                               String                @id @default(cuid())
  name                             String
  email                            String                @unique
  mobile                           String                @unique
  role                             StaffRole
  password_hash                    String
  branch_id                        String?
  is_active                        Boolean               @default(true)
  created_at                       DateTime              @default(now())
  updated_at                       DateTime              @updatedAt
  last_login                       DateTime?
  company_id                       String?
  assigned_leads                   Lead[]                @relation("LeadAssignedTo")
  generated_leads                  Lead[]                @relation("LeadGeneratedBy")
  material_consumptions_created    MaterialConsumption[] @relation("MaterialConsumptionCreatedBy")
  material_consumptions_technician MaterialConsumption[] @relation("MaterialConsumptionTechnician")
  material_issues_approved         MaterialIssue[]       @relation("MaterialIssueApprovedBy")
  material_issues_created          MaterialIssue[]       @relation("MaterialIssueCreatedBy")
  material_receipts_approved       MaterialReceipt[]     @relation("MaterialReceiptApprovedBy")
  material_receipts_created        MaterialReceipt[]     @relation("MaterialReceiptCreatedBy")
  material_returns_approved        MaterialReturn[]      @relation("MaterialReturnApprovedBy")
  material_returns_created         MaterialReturn[]      @relation("MaterialReturnCreatedBy")
  material_transfers_approved      MaterialTransfer[]    @relation("MaterialTransferApprovedBy")
  material_transfers_created       MaterialTransfer[]    @relation("MaterialTransferCreatedBy")
  quotes_approved                  Quote[]               @relation("QuoteApprovedBy")
  quotes_created                   Quote[]               @relation("QuoteCreatedBy")
  services                         Service[]
  branch                           Branch?               @relation(fields: [branch_id], references: [id])
  company                          Company?              @relation(fields: [company_id], references: [id])
  stock_ledger_entries             StockLedger[]

  @@index([branch_id], map: "staff_branch_id_fkey")
  @@index([company_id], map: "staff_company_id_fkey")
  @@map("staff")
}

model Branch {
  id                      String             @id @default(cuid())
  name                    String
  address                 String
  city                    String
  state                   String
  pincode                 String
  phone                   String?
  email                   String?
  is_active               Boolean            @default(true)
  created_at              DateTime           @default(now())
  updated_at              DateTime           @updatedAt
  company_id              String
  branch_type             BranchType         @default(GENERAL_BRANCH)
  company                 Company            @relation(fields: [company_id], references: [id])
  leads                   Lead[]
  material_issues_from    MaterialIssue[]    @relation("MaterialIssueFromBranch")
  material_receipts_from  MaterialReceipt[]  @relation("MaterialReceiptFromBranch")
  material_receipts_to    MaterialReceipt[]  @relation("MaterialReceiptToBranch")
  material_returns_from   MaterialReturn[]   @relation("MaterialReturnFromBranch")
  material_returns_to     MaterialReturn[]   @relation("MaterialReturnToBranch")
  material_transfers_from MaterialTransfer[] @relation("MaterialTransferFromBranch")
  material_transfers_to   MaterialTransfer[] @relation("MaterialTransferToBranch")
  quotes                  Quote[]
  staff                   Staff[]
  stock_ledger            StockLedger[]

  @@index([company_id], map: "branches_company_id_fkey")
  @@map("branches")
}

model Lead {
  id                    String                @id @default(cuid())
  customer_name         String
  customer_email        String?
  customer_phone        String
  address               String
  city                  String
  state                 String
  pincode               String
  service_type          ServiceType
  pest_type             String?
  property_type         PropertyType
  property_size         String?
  urgency_level         UrgencyLevel          @default(MEDIUM)
  preferred_date        DateTime?
  preferred_time        String?
  description           String?
  status                LeadStatus            @default(NEW)
  source                LeadSource            @default(WEBSITE)
  assigned_to           String?
  branch_id             String?
  estimated_cost        Decimal?              @db.Decimal(10, 2)
  notes                 String?
  created_at            DateTime              @default(now())
  updated_at            DateTime              @updatedAt
  company_id            String?
  area                  String?
  lead_generated_by     String?
  lead_type             LeadType?             @default(ONCALL)
  lead_services         LeadService[]
  assigned_staff        Staff?                @relation("LeadAssignedTo", fields: [assigned_to], references: [id])
  branch                Branch?               @relation(fields: [branch_id], references: [id])
  company               Company?              @relation(fields: [company_id], references: [id])
  generated_by_staff    Staff?                @relation("LeadGeneratedBy", fields: [lead_generated_by], references: [id])
  material_consumptions MaterialConsumption[]
  quotes                Quote[]
  services              Service[]

  @@index([assigned_to], map: "leads_assigned_to_fkey")
  @@index([lead_generated_by], map: "leads_generated_by_fkey")
  @@index([branch_id], map: "leads_branch_id_fkey")
  @@index([company_id], map: "leads_company_id_fkey")
  @@map("leads")
}

model Service {
  id                    String                @id @default(cuid())
  lead_id               String
  service_type          ServiceType
  service_date          DateTime
  technician_id         String
  status                ServiceStatus         @default(SCHEDULED)
  cost                  Decimal               @db.Decimal(10, 2)
  payment_status        PaymentStatus         @default(PENDING)
  notes                 String?
  materials_used        String?
  before_photos         String?               @db.LongText
  after_photos          String?               @db.LongText
  customer_rating       Int?                  @db.SmallInt
  customer_feedback     String?
  warranty_period       Int?
  warranty_expiry       DateTime?
  created_at            DateTime              @default(now())
  updated_at            DateTime              @updatedAt
  material_consumptions MaterialConsumption[]
  lead                  Lead                  @relation(fields: [lead_id], references: [id])
  technician            Staff                 @relation(fields: [technician_id], references: [id])

  @@index([lead_id], map: "services_lead_id_fkey")
  @@index([technician_id], map: "services_technician_id_fkey")
  @@map("services")
}

model otp_verifications {
  id          Int      @id @default(autoincrement())
  email       String   @db.VarChar(255)
  otp_code    String   @db.VarChar(6)
  expires_at  DateTime @default(now()) @db.Timestamp(0)
  is_verified Boolean? @default(false)
  attempts    Int?     @default(0)
  created_at  DateTime @default(now()) @db.Timestamp(0)

  @@index([email], map: "idx_otp_email")
  @@index([expires_at], map: "idx_otp_expires")
}

model password_reset_tokens {
  id         Int      @id @default(autoincrement())
  email      String   @db.VarChar(255)
  token      String   @db.VarChar(255)
  expires_at DateTime @default(now()) @db.Timestamp(0)
  is_used    Boolean? @default(false)
  created_at DateTime @default(now()) @db.Timestamp(0)

  @@index([email], map: "idx_reset_email")
  @@index([expires_at], map: "idx_reset_expires")
  @@index([token], map: "idx_reset_token")
}

model LeadService {
  id             String      @id @default(cuid())
  lead_id        String
  service_type   ServiceType
  description    String?
  estimated_cost Decimal?    @db.Decimal(10, 2)
  created_at     DateTime    @default(now())
  updated_at     DateTime    @updatedAt
  lead           Lead        @relation(fields: [lead_id], references: [id], onDelete: Cascade)

  @@unique([lead_id, service_type])
  @@index([lead_id], map: "lead_services_lead_id_fkey")
  @@map("lead_services")
}

model Item {
  id                String                    @id @default(cuid())
  name              String
  category          String
  subcategory       String?
  brand             String?
  model             String?
  base_uom          String
  gst_percentage    Decimal                   @db.Decimal(5, 2)
  hsn_code          String?
  description       String?
  min_stock_level   Decimal?                  @db.Decimal(15, 4)
  max_stock_level   Decimal?                  @db.Decimal(15, 4)
  reorder_level     Decimal?                  @db.Decimal(15, 4)
  is_active         Boolean                   @default(true)
  created_at        DateTime                  @default(now())
  updated_at        DateTime                  @updatedAt
  company_id        String
  company           Company                   @relation(fields: [company_id], references: [id])
  material_batches  MaterialBatch[]
  consumption_items MaterialConsumptionItem[]
  issue_items       MaterialIssueItem[]
  receipt_items     MaterialReceiptItem[]
  return_items      MaterialReturnItem[]
  transfer_items    MaterialTransferItem[]
  quote_items       QuoteItem[]
  stock_ledgers     StockLedger[]
  uom_conversions   UomConversion[]

  @@index([company_id])
  @@map("items")
}

model UomConversion {
  id                String   @id @default(cuid())
  item_id           String
  from_uom          String
  to_uom            String
  conversion_factor Decimal  @db.Decimal(10, 4)
  created_at        DateTime @default(now())
  updated_at        DateTime @updatedAt
  item              Item     @relation(fields: [item_id], references: [id], onDelete: Cascade)

  @@unique([item_id, from_uom, to_uom])
  @@index([item_id])
  @@map("uom_conversions")
}

model MaterialBatch {
  id                String                    @id @default(cuid())
  item_id           String
  batch_no          String
  mfg_date          DateTime?
  expiry_date       DateTime?
  initial_qty       Decimal                   @db.Decimal(15, 4)
  current_qty       Decimal                   @db.Decimal(15, 4)
  rate_per_unit     Decimal                   @db.Decimal(10, 2)
  gst_percentage    Decimal                   @db.Decimal(5, 2)
  location_type     LocationType
  location_id       String
  is_expired        Boolean                   @default(false)
  created_at        DateTime                  @default(now())
  updated_at        DateTime                  @updatedAt
  item              Item                      @relation(fields: [item_id], references: [id])
  consumption_items MaterialConsumptionItem[]
  issue_items       MaterialIssueItem[]
  receipt_items     MaterialReceiptItem[]
  return_items      MaterialReturnItem[]
  transfer_items    MaterialTransferItem[]
  stock_ledgers     StockLedger[]

  @@unique([item_id, batch_no, location_type, location_id])
  @@index([item_id])
  @@index([expiry_date])
  @@index([location_type, location_id])
  @@map("material_batches")
}

model MaterialReceipt {
  id                  String                @id @default(cuid())
  receipt_no          String                @unique
  receipt_date        DateTime
  vendor_name         String?
  vendor_invoice_no   String?
  vendor_invoice_date DateTime?
  from_location_type  LocationType?
  from_location_id    String?
  to_location_type    LocationType
  to_location_id      String
  total_amount        Decimal               @db.Decimal(12, 2)
  discount_amount     Decimal?              @db.Decimal(10, 2)
  gst_amount          Decimal               @db.Decimal(10, 2)
  net_amount          Decimal               @db.Decimal(12, 2)
  status              TransactionStatus     @default(PENDING)
  created_by          String
  approved_by         String?
  created_at          DateTime              @default(now())
  updated_at          DateTime              @updatedAt
  receipt_items       MaterialReceiptItem[]
  approved_by_staff   Staff?                @relation("MaterialReceiptApprovedBy", fields: [approved_by], references: [id])
  created_by_staff    Staff                 @relation("MaterialReceiptCreatedBy", fields: [created_by], references: [id])
  from_branch         Branch?               @relation("MaterialReceiptFromBranch", fields: [from_location_id], references: [id])
  to_branch           Branch                @relation("MaterialReceiptToBranch", fields: [to_location_id], references: [id])

  @@index([created_by])
  @@index([approved_by])
  @@index([to_location_type, to_location_id])
  @@index([from_location_id], map: "material_receipts_from_location_id_fkey")
  @@index([to_location_id], map: "material_receipts_to_location_id_fkey")
  @@map("material_receipts")
}

model MaterialReceiptItem {
  id               String          @id @default(cuid())
  receipt_id       String
  item_id          String
  batch_id         String
  quantity         Decimal         @db.Decimal(15, 4)
  uom              String
  rate_per_unit    Decimal         @db.Decimal(10, 2)
  discount_percent Decimal?        @db.Decimal(5, 2)
  discount_amount  Decimal?        @db.Decimal(10, 2)
  gst_percentage   Decimal         @db.Decimal(5, 2)
  gst_amount       Decimal         @db.Decimal(10, 2)
  total_amount     Decimal         @db.Decimal(12, 2)
  created_at       DateTime        @default(now())
  batch            MaterialBatch   @relation(fields: [batch_id], references: [id])
  item             Item            @relation(fields: [item_id], references: [id])
  receipt          MaterialReceipt @relation(fields: [receipt_id], references: [id], onDelete: Cascade)

  @@index([receipt_id])
  @@index([item_id])
  @@index([batch_id])
  @@map("material_receipt_items")
}

model MaterialIssue {
  id                 String              @id @default(cuid())
  issue_no           String              @unique
  issue_date         DateTime
  from_location_type LocationType
  from_location_id   String
  to_location_type   LocationType
  to_location_id     String
  purpose            String?
  status             TransactionStatus   @default(AWAITING_APPROVAL)
  created_by         String
  approved_by        String?
  created_at         DateTime            @default(now())
  updated_at         DateTime            @updatedAt
  approval_date      DateTime?
  rejection_reason   String?
  remarks            String?
  issue_items        MaterialIssueItem[]
  approved_by_staff  Staff?              @relation("MaterialIssueApprovedBy", fields: [approved_by], references: [id])
  created_by_staff   Staff               @relation("MaterialIssueCreatedBy", fields: [created_by], references: [id])
  from_branch        Branch              @relation("MaterialIssueFromBranch", fields: [from_location_id], references: [id])

  @@index([created_by])
  @@index([approved_by])
  @@index([from_location_type, from_location_id])
  @@index([to_location_type, to_location_id])
  @@index([from_location_id], map: "material_issues_from_location_id_fkey")
  @@index([to_location_id], map: "material_issues_to_location_id_fkey")
  @@map("material_issues")
}

model MaterialIssueItem {
  id            String        @id @default(cuid())
  issue_id      String
  item_id       String
  batch_id      String
  quantity      Decimal       @db.Decimal(15, 4)
  uom           String
  rate_per_unit Decimal       @db.Decimal(10, 2)
  base_amount   Decimal       @db.Decimal(10, 2) @default(0)
  gst_amount    Decimal       @db.Decimal(10, 2) @default(0)
  total_amount  Decimal       @db.Decimal(12, 2)
  created_at    DateTime      @default(now())
  batch         MaterialBatch @relation(fields: [batch_id], references: [id])
  issue         MaterialIssue @relation(fields: [issue_id], references: [id], onDelete: Cascade)
  item          Item          @relation(fields: [item_id], references: [id])

  @@index([issue_id])
  @@index([item_id])
  @@index([batch_id])
  @@map("material_issue_items")
}

model MaterialReturn {
  id                 String               @id @default(cuid())
  return_no          String               @unique
  return_date        DateTime
  from_location_type LocationType
  from_location_id   String
  to_location_type   LocationType
  to_location_id     String
  reason             String?
  status             TransactionStatus    @default(PENDING)
  created_by         String
  approved_by        String?
  created_at         DateTime             @default(now())
  updated_at         DateTime             @updatedAt
  return_items       MaterialReturnItem[]
  approved_by_staff  Staff?               @relation("MaterialReturnApprovedBy", fields: [approved_by], references: [id])
  created_by_staff   Staff                @relation("MaterialReturnCreatedBy", fields: [created_by], references: [id])
  from_branch        Branch               @relation("MaterialReturnFromBranch", fields: [from_location_id], references: [id])
  to_branch          Branch               @relation("MaterialReturnToBranch", fields: [to_location_id], references: [id])

  @@index([created_by])
  @@index([approved_by])
  @@index([from_location_type, from_location_id])
  @@index([to_location_type, to_location_id])
  @@index([from_location_id], map: "material_returns_from_location_id_fkey")
  @@index([to_location_id], map: "material_returns_to_location_id_fkey")
  @@map("material_returns")
}

model MaterialReturnItem {
  id            String         @id @default(cuid())
  return_id     String
  item_id       String
  batch_id      String
  quantity      Decimal        @db.Decimal(15, 4)
  uom           String
  rate_per_unit Decimal        @db.Decimal(10, 2)
  total_amount  Decimal        @db.Decimal(12, 2)
  created_at    DateTime       @default(now())
  batch         MaterialBatch  @relation(fields: [batch_id], references: [id])
  item          Item           @relation(fields: [item_id], references: [id])
  return        MaterialReturn @relation(fields: [return_id], references: [id], onDelete: Cascade)

  @@index([return_id])
  @@index([item_id])
  @@index([batch_id])
  @@map("material_return_items")
}

model MaterialTransfer {
  id                 String                 @id @default(cuid())
  transfer_no        String                 @unique
  transfer_date      DateTime
  from_location_type LocationType
  from_location_id   String
  to_location_type   LocationType
  to_location_id     String
  purpose            String?
  status             TransactionStatus      @default(PENDING)
  created_by         String
  approved_by        String?
  created_at         DateTime               @default(now())
  updated_at         DateTime               @updatedAt
  transfer_items     MaterialTransferItem[]
  approved_by_staff  Staff?                 @relation("MaterialTransferApprovedBy", fields: [approved_by], references: [id])
  created_by_staff   Staff                  @relation("MaterialTransferCreatedBy", fields: [created_by], references: [id])
  from_branch        Branch                 @relation("MaterialTransferFromBranch", fields: [from_location_id], references: [id])
  to_branch          Branch                 @relation("MaterialTransferToBranch", fields: [to_location_id], references: [id])

  @@index([created_by])
  @@index([approved_by])
  @@index([from_location_type, from_location_id])
  @@index([to_location_type, to_location_id])
  @@index([from_location_id], map: "material_transfers_from_location_id_fkey")
  @@index([to_location_id], map: "material_transfers_to_location_id_fkey")
  @@map("material_transfers")
}

model MaterialTransferItem {
  id            String           @id @default(cuid())
  transfer_id   String
  item_id       String
  batch_id      String
  quantity      Decimal          @db.Decimal(15, 4)
  uom           String
  rate_per_unit Decimal          @db.Decimal(10, 2)
  total_amount  Decimal          @db.Decimal(12, 2)
  created_at    DateTime         @default(now())
  batch         MaterialBatch    @relation(fields: [batch_id], references: [id])
  item          Item             @relation(fields: [item_id], references: [id])
  transfer      MaterialTransfer @relation(fields: [transfer_id], references: [id], onDelete: Cascade)

  @@index([transfer_id])
  @@index([item_id])
  @@index([batch_id])
  @@map("material_transfer_items")
}

model MaterialConsumption {
  id                String                    @id @default(cuid())
  consumption_no    String                    @unique
  consumption_date  DateTime
  technician_id     String
  service_id        String?
  lead_id           String?
  customer_name     String?
  job_description   String?
  status            TransactionStatus         @default(COMPLETED)
  created_by        String
  created_at        DateTime                  @default(now())
  updated_at        DateTime                  @updatedAt
  consumption_items MaterialConsumptionItem[]
  created_by_staff  Staff                     @relation("MaterialConsumptionCreatedBy", fields: [created_by], references: [id])
  lead              Lead?                     @relation(fields: [lead_id], references: [id])
  service           Service?                  @relation(fields: [service_id], references: [id])
  technician        Staff                     @relation("MaterialConsumptionTechnician", fields: [technician_id], references: [id])

  @@index([technician_id])
  @@index([service_id])
  @@index([lead_id])
  @@index([created_by])
  @@map("material_consumptions")
}

model MaterialConsumptionItem {
  id             String              @id @default(cuid())
  consumption_id String
  item_id        String
  batch_id       String
  quantity       Decimal             @db.Decimal(15, 4)
  uom            String
  rate_per_unit  Decimal             @db.Decimal(10, 2)
  total_amount   Decimal             @db.Decimal(12, 2)
  created_at     DateTime            @default(now())
  batch          MaterialBatch       @relation(fields: [batch_id], references: [id])
  consumption    MaterialConsumption @relation(fields: [consumption_id], references: [id], onDelete: Cascade)
  item           Item                @relation(fields: [item_id], references: [id])

  @@index([consumption_id])
  @@index([item_id])
  @@index([batch_id])
  @@map("material_consumption_items")
}

model StockLedger {
  id               String          @id @default(cuid())
  item_id          String
  batch_id         String
  location_type    LocationType
  location_id      String
  transaction_type TransactionType
  transaction_id   String
  transaction_date DateTime
  quantity_in      Decimal?        @db.Decimal(15, 4)
  quantity_out     Decimal?        @db.Decimal(15, 4)
  balance_quantity Decimal         @db.Decimal(15, 4)
  rate_per_unit    Decimal         @db.Decimal(10, 2)
  balance_value    Decimal         @db.Decimal(15, 2)
  created_at       DateTime        @default(now())
  created_by       String
  ip_address       String?
  notes            String?
  reference_no     String?
  reversal_of      String?
  session_id       String?
  system_generated Boolean         @default(false)
  updated_at       DateTime        @updatedAt
  user_agent       String?
  user_role        String?
  batch            MaterialBatch   @relation(fields: [batch_id], references: [id])
  created_by_staff Staff           @relation(fields: [created_by], references: [id])
  item             Item            @relation(fields: [item_id], references: [id])
  branch           Branch          @relation(fields: [location_id], references: [id])

  @@index([item_id])
  @@index([batch_id])
  @@index([created_by])
  @@index([location_type, location_id])
  @@index([transaction_date])
  @@index([transaction_type])
  @@index([reversal_of])
  @@index([location_id], map: "stock_ledgers_location_id_fkey")
  @@map("stock_ledgers")
}

model Permission {
  id               String           @id @default(cuid())
  name             String           @unique
  module           String
  action           String
  description      String?
  created_at       DateTime         @default(now())
  updated_at       DateTime         @updatedAt
  role_permissions RolePermission[]

  @@map("permissions")
}

model RolePermission {
  id            String     @id @default(cuid())
  role          StaffRole
  permission_id String
  granted       Boolean    @default(true)
  data_scope    DataScope  @default(PERSONAL)
  created_at    DateTime   @default(now())
  updated_at    DateTime   @updatedAt
  permission    Permission @relation(fields: [permission_id], references: [id], onDelete: Cascade)

  @@unique([role, permission_id])
  @@index([permission_id], map: "role_permissions_permission_id_fkey")
  @@map("role_permissions")
}

model Quote {
  id                String        @id @default(cuid())
  quote_no          String        @unique
  lead_id           String?
  customer_name     String
  customer_email    String?
  customer_phone    String?
  customer_address  String?
  service_type      ServiceType
  property_type     PropertyType?
  area_size         String?
  urgency_level     UrgencyLevel  @default(MEDIUM)
  status            QuoteStatus   @default(DRAFT)
  valid_until       DateTime
  subtotal          Decimal       @db.Decimal(12, 2)
  tax_percentage    Decimal       @default(18.00) @db.Decimal(5, 2)
  tax_amount        Decimal       @db.Decimal(12, 2)
  discount_amount   Decimal       @default(0.00) @db.Decimal(12, 2)
  total_amount      Decimal       @db.Decimal(12, 2)
  terms_conditions  String?       @db.Text
  notes             String?       @db.Text
  created_by        String
  approved_by       String?
  approved_at       DateTime?
  sent_at           DateTime?
  company_id        String
  branch_id         String
  created_at        DateTime      @default(now())
  updated_at        DateTime      @updatedAt
  quote_items       QuoteItem[]
  approved_by_staff Staff?        @relation("QuoteApprovedBy", fields: [approved_by], references: [id])
  branch            Branch        @relation(fields: [branch_id], references: [id])
  company           Company       @relation(fields: [company_id], references: [id])
  created_by_staff  Staff         @relation("QuoteCreatedBy", fields: [created_by], references: [id])
  lead              Lead?         @relation(fields: [lead_id], references: [id])

  @@index([company_id])
  @@index([branch_id])
  @@index([created_by])
  @@index([lead_id])
  @@index([approved_by], map: "quotes_approved_by_fkey")
  @@map("quotes")
}

model QuoteItem {
  id           String   @id @default(cuid())
  quote_id     String
  item_id      String?
  service_name String
  description  String?  @db.Text
  quantity     Decimal  @db.Decimal(10, 2)
  unit_price   Decimal  @db.Decimal(10, 2)
  total_price  Decimal  @db.Decimal(12, 2)
  created_at   DateTime @default(now())
  item         Item?    @relation(fields: [item_id], references: [id])
  quote        Quote    @relation(fields: [quote_id], references: [id], onDelete: Cascade)

  @@index([quote_id])
  @@index([item_id])
  @@map("quote_items")
}

enum SubscriptionPlan {
  BASIC
  PREMIUM
  ENTERPRISE

  @@map("subscription_plan")
}

enum StaffRole {
  SUPERADMIN
  ADMIN
  REGIONAL_MANAGER
  AREA_MANAGER
  OPERATION_MANAGER
  INVENTORY_MANAGER
  ACCOUNT_MANAGER
  SALES_EXECUTIVE
  SUPERVISOR
  TECHNICIAN
  CUSTOMER

  @@map("staff_role")
}

enum ServiceType {
  RESIDENTIAL_PEST_CONTROL
  COMMERCIAL_PEST_CONTROL
  TERMITE_CONTROL
  RODENT_CONTROL
  COCKROACH_CONTROL
  ANT_CONTROL
  MOSQUITO_CONTROL
  BED_BUG_CONTROL
  BIRD_CONTROL
  SNAKE_CONTROL

  @@map("service_type")
}

enum PropertyType {
  APARTMENT
  INDEPENDENT_HOUSE
  VILLA
  OFFICE
  SHOP
  RESTAURANT
  WAREHOUSE
  FACTORY
  HOSPITAL
  SCHOOL
  OTHER

  @@map("property_type")
}

enum UrgencyLevel {
  LOW
  MEDIUM
  HIGH
  EMERGENCY

  @@map("urgency_level")
}

enum LeadStatus {
  NEW
  CONTACTED
  QUALIFIED
  QUOTED
  CONVERTED
  LOST
  CANCELLED

  @@map("lead_status")
}

enum LeadSource {
  WEBSITE
  PHONE_CALL
  REFERRAL
  SOCIAL_MEDIA
  ADVERTISEMENT
  WALK_IN
  OTHER

  @@map("lead_source")
}

enum LeadType {
  ONCALL
  AMC

  @@map("lead_type")
}

enum ServiceStatus {
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  RESCHEDULED

  @@map("service_status")
}

enum PaymentStatus {
  PENDING
  PARTIAL
  PAID
  REFUNDED

  @@map("payment_status")
}

enum LocationType {
  COMPANY
  BRANCH
  TECHNICIAN

  @@map("location_type")
}

enum TransactionStatus {
  PENDING
  AWAITING_APPROVAL
  APPROVED
  RECEIVED
  COMPLETED
  REJECTED
  CANCELLED

  @@map("transaction_status")
}

enum TransactionType {
  RECEIPT
  ISSUE
  RETURN
  TRANSFER_OUT
  TRANSFER_IN
  CONSUMPTION
  ADJUSTMENT

  @@map("transaction_type")
}

enum BranchType {
  MAIN_BRANCH
  GENERAL_BRANCH

  @@map("branch_type")
}

enum DataScope {
  GLOBAL
  COMPANY
  BRANCH
  PERSONAL

  @@map("data_scope")
}

enum QuoteStatus {
  DRAFT
  PENDING_APPROVAL
  APPROVED
  SENT
  ACCEPTED
  REJECTED
  EXPIRED
  CONVERTED

  @@map("quote_status")
}
